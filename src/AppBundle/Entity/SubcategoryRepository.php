<?php

namespace AppBundle\Entity;

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;

/**
 * SubcategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubcategoryRepository extends \Doctrine\ORM\EntityRepository
{
    private $subcategories = null; // categories dictionary for fast check
    
    public function getSubcategoryBySlug($slug) {
        // initialise $subcategories
        if ($this->subcategories == null) {
            $result = $this
                ->getEntityManager()
                ->createQuery('select c from AppBundle:Subcategory c')
                ->getResult();            
            
            $this->subcategories = array();
            foreach ($result as $s) {
                $this->subcategories[$s->getSlug()] = $s;
            }
        }
        // actual get/check
        if (array_key_exists($slug, $this->subcategories)) {
            return $this->subcategories[$slug];
        } else {
            return null;
        }
    }
    

    public function getAllOrderedByPosition() {
        $q = "select s from AppBundle:Subcategory s join s.category c order by c.position asc, s.position asc";
        return $this->getEntityManager()->createQuery($q)->getResult();
    }
    
    public function countAllByCategoryId($categoryID) {
        return $this->createQueryBuilder('sc')
            ->where('sc.category = :categoryID')
            ->setParameter('categoryID', $categoryID)                
            ->select('count(sc.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }
    
    public function getAllByCategoryId($categoryID, $sortColumn, $sortDirection, $pageSize, $page) {
        $sql = "SELECT sc FROM AppBundle:Subcategory sc WHERE sc.category = :categoryID";
        
        
        if ($sortColumn != null && $sortColumn != ""){
            $sql .= " ORDER BY sc." . $sortColumn;
        }
        if ($sortDirection != null && $sortDirection != ""){
            $sql .= " " . $sortDirection;
        }
        
        $query = $this->getEntityManager()->createQuery($sql);
        $query->setParameter('categoryID', $categoryID);

        
        if ($pageSize != null && $pageSize != ""){
            $query->setMaxResults($pageSize);
        }
        if ($page != null && $page != "" && $page != 1){            
            $query->setFirstResult(($page - 1) * $pageSize);
        }
        
        return $query->getResult();
    }
    public function removeImage($subcategory, $image_storage_dir) {
        $oldImage = $subcategory->getImage();
        if ($oldImage != null) {
            $fullPath = sprintf("%s%s\\%s",
                $image_storage_dir,
                $oldImage->getPath(),
                $oldImage->getName());
            $fs = new Filesystem();
            $fs->remove($fullPath);

            $em = $this->getEntityManager();

            $subcategory->setImage(null); 
            $em->remove($oldImage);
            $em->flush();
        }
        
        return $subcategory;
    }

}

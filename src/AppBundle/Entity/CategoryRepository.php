<?php

namespace AppBundle\Entity;

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{    
    public function getAllOrderedByPosition() {
        $q = "select c from AppBundle:Category c order by c.position asc";
        return $this->getEntityManager()->createQuery($q)->getResult();
    }
    
    public function countAll() {
        return $this->createQueryBuilder('c')
            ->select('count(c.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }
    
    public function getAll($sortColumn, $sortDirection, $pageSize, $page) {
        $sql = "SELECT c FROM AppBundle:Category c";
        
        if ($sortColumn != null && $sortColumn != ""){
            $sql .= " ORDER BY c." . $sortColumn;
        }
        if ($sortDirection != null && $sortDirection != ""){
            $sql .= " " . $sortDirection;
        }
        
        $query = $this->getEntityManager()->createQuery($sql);
        
        if ($pageSize != null && $pageSize != ""){
            $query->setMaxResults($pageSize);
        }
        if ($page != null && $page != "" && $page != 1){            
            $query->setFirstResult(($page - 1) * $pageSize);
        }
        
        return $query->getResult();
    }
    
    public function removeImage($category, $image_storage_dir) {
        $oldImage = $category->getImage();
        if ($oldImage != null) {
            /*$fullPath = sprintf("%s%s\\%s",
                $image_storage_dir,
                $oldImage->getPath(),
                $oldImage->getName());*/
            $fullPath = 
                $image_storage_dir .
                    DIRECTORY_SEPARATOR .
                    $oldImage->getPath() .
                    DIRECTORY_SEPARATOR .
                    $oldImage->getUuid() . '.' . $oldImage->getExtension();
            
            $fs = new Filesystem();
            $fs->remove($fullPath);

            $em = $this->getEntityManager();

            $category->setImage(null); 
            $em->remove($oldImage);
            $em->flush();
        }
        
        return $category;
    }
    
    public function removeSubcategoriesFromCategory($category) {
        $em = $this->getEntityManager();
        $subs = $category->getSubcategories();
        foreach($subs as $sub) {
            $em->remove($sub);
        }
        $em->flush();
        return $category;
    }

}

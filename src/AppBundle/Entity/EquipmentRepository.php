<?php

namespace AppBundle\Entity;

use AppBundle\Utils\SearchParams;
use Doctrine\ORM\EntityRepository;

/**
 * EquipmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EquipmentRepository extends EntityRepository
{
    public function getAllBySubcategory($subcategoryId) {
        $sql = "select e from AppBundle:Equipment e where e.subcategory = :subcategoryId";
        $query = $this->getEntityManager()->createQuery($sql);
        $query->setParameter('subcategoryId', $subcategoryId);
        return $query->getResult();        
    }   
    public function getAllByUserId($userId) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e')
            ->from('AppBundle:Equipment', 'e')
            ->join('e.user', 'u');
        $qb->andWhere("u.id = {$userId}");

        $q = $qb->getQuery();
        
        return $q->getResult();        
    }
    
    /*
    public function getAll($categoryId = null) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('e')
            ->from('AppBundle:Equipment', 'e')
            ->join('e.subcategory', 's');
        if ($categoryId != null) {
            $qb->andWhere("s.category = {$categoryId}");
        }
        
        $q = $qb->getQuery();
        return $q->getResult();
    }
    */
    public function getAll(SearchParams $params) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('e', 'i', 'd')        
            ->from('AppBundle:Equipment', 'e')
            ->join('e.subcategory', 's')
            ->leftJoin('e.images', 'i')
            ->leftJoin('e.discounts', 'd');
        
        if ($params->getCategoryId() != null) {
            $qb->andWhere("s.category = {$params->getCategoryId()}");
        }
        if ($params->getDiscount()) {
            $now = date('Y-m-d H:i:s');
            $qb->andWhere("d.createdAt <= '{$now}'")
                ->andWhere("d.expiresAt >= '{$now}'");
        }
        if ($params->getTestBuy()) {
            $qb->andWhere('e.priceBuy > 0');
        }
        if ($params->getSort() === 'date') {
            $qb->orderBy('e.createdAt', 'desc');
        }
        elseif ($params->getSort() === 'price') {
            $qb->orderBy ('e.price', 'asc');
        }
        
        $q = $qb->getQuery();
        return $q->getResult();
    }
    
    public function clearFeatures($equipmentId) {
        $sql = 'delete from AppBundle:EquipmentFeature ef where ef.equipment = :equipment';
        $q = $this->getEntityManager()->createQuery($sql);
        $q->setParameter(':equipment', $equipmentId);
        $q->execute();
    }
    public function saveFeatures($equipmentId, $features) {
        $this->clearFeatures($equipmentId);
        $em = $this->getEntityManager();
        foreach ($features as $id => $text) {
            $ef = new EquipmentFeature();
            $ef->setEquipment($em->getReference('AppBundle:Equipment', $equipmentId));
            $ef->setFeature($em->getReference('AppBundle:Feature', $id));
            $ef->setName($text);
            $em->persist($ef);
        }
        $em->flush();
        $em->clear();
    }
    public function getFeaturesAsArray($equipmentId) {
        $sql = "select * from equipment_feature where equipment_id = {$equipmentId}";
        $conn = $this->getEntityManager()->getConnection();
        $rows = $conn->query($sql)->fetchAll();
        $conn->close();
        
        $result = array();
        foreach ($rows as $row) {
            $result[$row['feature_id']] = $row['name'];
        }
        
        return $result;
    }
}
